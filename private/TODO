To do
=====

- after Racket 5.1.1 release:
  - set required-core-version to 5.1.1
  - drop private/generic/check-access.rkt
  - split private/generic/socket.rkt into separate package
  - use ryanc/macros:2/lazy-require in main.rkt
  - use ryanc/macros:2/relation in message modules

----

Testing

- test sql-intervals

- test statement-generators

- test kill-safe-connection by creating dummy connection object:
  - query method acquires lock, sleeps, releases lock, returns
    maybe bumps external semaphre before sleeping
    kill calling thread while sleeping to test kill-safe proxy

----

Types

- add sql-interval to ODBC (easy as result, complicated as param, I think)

- stricter range checking, etc, of params before entering critical section

- permit type annotations for
  - query params (would help mysql, odbc)
  - extra conversions on result fields (eg sqlite, specify date field)

- sqlite: opportunistic conversions based on decltype (eg date, time)

----

- doc: enumerate errors
- document exn:fail:sql, when used, when not used, links to SQLSTATE docs?

- figure out ODBC and unicode (need to use WCHAR?)

- sqlite: allow configurable behavior on SQLITE_BUSY
  eg retry n times, retry forever, retry w/ timeout, fail
  (is db locked only for write or for whole transaction?)

- some parts of docs are Linux-centric, especially ODBC part; broaden

- disconnect should always work, even on damaged connections
  (eg kill-thread, custodian shutdown)
