To do
=====

Geometry according to mysql:
abstract Geometry
- Point = (x, y)
- abstract Curve
  - LineString = (list of points)
    - predicate Line
    - predicate LinearRing (closed and non-self-intersecting, bleh)
- abstract Surface
  - Polygon (defined by LinearRings, bleh)
      = exterior ring, list of interior rings
- GeometryCollection = (list of geometry values)
  - MultiPoint = (list of points)
  - abstract MultiCurve
    - MultiLineString = (list of line strings)
  - abstract MultiSurface
    - MultiPolygon = (list of polygons)

every geometric value has an associated Spacial Reference System (SRID), ignored by mysql


Geometry according to postgis:

same as above, but with coordinate variants: eg pointm = (x, y, m)


----------------------------------------

- move util/sql-type-ext to type-ext/pg (or pg-geom?)
- add type-ext/gis for geometric types
  - mysql, postgresql when mapping is direct

- after Racket 5.1.1 release:
  - set required-core-version to 5.1.1
  - drop private/generic/check-access.rkt
  - split private/generic/socket.rkt into separate package
  - use ryanc/macros:2/lazy-require in main.rkt
  - use ryanc/macros:2/relation in message modules

----

Testing

- test sql-intervals

- test statement-generators

- test kill-safe-connection by creating dummy connection object:
  - query method acquires lock, sleeps, releases lock, returns
    maybe bumps external semaphre before sleeping
    kill calling thread while sleeping to test kill-safe proxy

- change SQL to allow tests to run on DB2 over ODBC

----

Types

- mysql geometry types
    - "select Point(1,2)" -> internal error, unsupported type "geometry"
    - "select cast(Point(1,2) as character)" -> internal error, unsupported type "long-blob"
      grr, doesn't convert to character string at all
      grr, doesn't even convert to WKB format; use AsBinary for that

- add sql-interval to ODBC (easy as result, complicated as param, I think)

- stricter range checking, etc, of params before entering critical section

- permit type annotations for
  - query params (would help mysql, odbc)
  - extra conversions on result fields (eg sqlite, specify date field)

- sqlite: opportunistic conversions based on decltype (eg date, time)

----

- add transaction awareness to connections? (eg begin/commit/rollback-tx, in-tx?)

- doc: enumerate errors
- document exn:fail:sql, when used, when not used, links to SQLSTATE docs?

- figure out ODBC and unicode (need to use WCHAR?)

- sqlite: allow configurable behavior on SQLITE_BUSY
  eg retry n times, retry forever, retry w/ timeout, fail
  (is db locked only for write or for whole transaction?)

- some parts of docs are Linux-centric, especially ODBC part; broaden

- disconnect should always work, even on damaged connections
  (eg kill-thread, custodian shutdown)
