To do
=====

- after Racket 5.1.1 release:
  - set required-core-version to 5.1.1
  - drop private/generic/check-access.rkt
  - split private/generic/socket.rkt into separate package
  - use ryanc/macros:2/lazy-require in main.rkt
  - use ryanc/macros:2/relation in message modules

----

Testing

- run ODBC tests on Windows (and Mac?)

- change SQL to allow tests to run on DB2 over ODBC

- test connection-generators

- test kill-safe-connection by creating dummy connection object:
  - query method acquires lock, sleeps, releases lock, returns
    maybe bumps external semaphre before sleeping
    kill calling thread while sleeping to test kill-safe proxy

----

Types

- type annotations
  - two modes: mandatory and opportunistic
  - on result fields (eg sqlite, convert to date)
  - on parameters ???
  - per query or per connection? (or both?)
  - either only well-known conversions, or must apply outside of lock

- postgresql record type: docs, send
- postgresql domain types, table record types, etc

- util/postgresql: add inet types
- util/geometry: add WKT functions

- add support for ODBC intervals (no point w/o driver to test with)

----

- figure out ODBC and unicode (need to use WCHAR?)

- sqlite: allow configurable behavior on SQLITE_BUSY
  eg retry n times, retry forever, retry w/ timeout, fail
  (is db locked only for write or for whole transaction?)

- add transaction awareness to connections? (eg begin/commit/rollback-tx, in-tx?)

- doc: enumerate errors
- document exn:fail:sql, when used, when not used, links to SQLSTATE docs?

- connected?, disconnect should always work, even on thread-damaged connections

- Racket-specific ODBC-like DSN format?
