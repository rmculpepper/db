To do
=====

- strict mode by default: error if backend result type unknown

----

- connection-generators, analogous to statement-generators
  cache by thread, but when to disconnect?

- test statement-generators

- test sql-interval type
  - and add to ODBC (easy as result, complicated as param (I think))

- doc: enumerate errors

- add sql-bits datatype for BIT, VARBIT types

- figure out ODBC and unicode (need to use WCHAR?)

- printers for sql-* structs

- sqlite: allow configurable behavior on SQLITE_BUSY
  eg retry n times, retry forever, retry w/ timeout, fail
  (is db locked only for write or for whole transaction?)

- some parts of docs are Linux-centric, especially ODBC part; broaden

- clean up le/be/host in generic/io, odbc

- export and doc kill-safe wrapper

- permit type annotations for
  - query params (would help mysql, odbc)
  - extra conversions on result fields (eg sqlite, specify date field)

- sqlite: opportunistic conversions based on decltype (eg date, time)

- disconnect should always work, even on damaged connections
  (eg kill-thread, custodian shutdown)
